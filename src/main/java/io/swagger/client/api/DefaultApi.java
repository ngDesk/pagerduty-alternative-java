/*
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Ticket;
import io.swagger.client.model.TicketMessage;
import io.swagger.client.model.TicketPremadeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletePremadeResponse
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePremadeResponseCall(Integer ticketPremadeResponseId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}"
            .replaceAll("\\{" + "ticket_premade_response_id" + "\\}", apiClient.escapeString(ticketPremadeResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePremadeResponseValidateBeforeCall(Integer ticketPremadeResponseId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketPremadeResponseId' is set
        if (ticketPremadeResponseId == null) {
            throw new ApiException("Missing the required parameter 'ticketPremadeResponseId' when calling deletePremadeResponse(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling deletePremadeResponse(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePremadeResponseCall(ticketPremadeResponseId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove from ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @return TicketPremadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketPremadeResponse deletePremadeResponse(Integer ticketPremadeResponseId, String authenticationToken) throws ApiException {
        ApiResponse<TicketPremadeResponse> resp = deletePremadeResponseWithHttpInfo(ticketPremadeResponseId, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Remove from ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;TicketPremadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketPremadeResponse> deletePremadeResponseWithHttpInfo(Integer ticketPremadeResponseId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = deletePremadeResponseValidateBeforeCall(ticketPremadeResponseId, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove from ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePremadeResponseAsync(Integer ticketPremadeResponseId, String authenticationToken, final ApiCallback<TicketPremadeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePremadeResponseValidateBeforeCall(ticketPremadeResponseId, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTicketReminder
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTicketReminderCall(String ticketId, String ticketReminderId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()))
            .replaceAll("\\{" + "ticket_reminder_id" + "\\}", apiClient.escapeString(ticketReminderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTicketReminderValidateBeforeCall(String ticketId, String ticketReminderId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling deleteTicketReminder(Async)");
        }
        
        // verify the required parameter 'ticketReminderId' is set
        if (ticketReminderId == null) {
            throw new ApiException("Missing the required parameter 'ticketReminderId' when calling deleteTicketReminder(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling deleteTicketReminder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTicketReminderCall(ticketId, ticketReminderId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove from ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTicketReminder(String ticketId, String ticketReminderId, String authenticationToken) throws ApiException {
        deleteTicketReminderWithHttpInfo(ticketId, ticketReminderId, authenticationToken);
    }

    /**
     * 
     * Remove from ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTicketReminderWithHttpInfo(String ticketId, String ticketReminderId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteTicketReminderValidateBeforeCall(ticketId, ticketReminderId, authenticationToken, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove from ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTicketReminderAsync(String ticketId, String ticketReminderId, String authenticationToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTicketReminderValidateBeforeCall(ticketId, ticketReminderId, authenticationToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTicketTag
     * @param ticketId  (required)
     * @param tagId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTicketTagCall(String ticketId, String tagId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/tags/{tag_id}"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()))
            .replaceAll("\\{" + "tag_id" + "\\}", apiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTicketTagValidateBeforeCall(String ticketId, String tagId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling deleteTicketTag(Async)");
        }
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteTicketTag(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling deleteTicketTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTicketTagCall(ticketId, tagId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove from tag_id
     * @param ticketId  (required)
     * @param tagId  (required)
     * @param authenticationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTicketTag(String ticketId, String tagId, String authenticationToken) throws ApiException {
        deleteTicketTagWithHttpInfo(ticketId, tagId, authenticationToken);
    }

    /**
     * 
     * Remove from tag_id
     * @param ticketId  (required)
     * @param tagId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTicketTagWithHttpInfo(String ticketId, String tagId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteTicketTagValidateBeforeCall(ticketId, tagId, authenticationToken, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove from tag_id
     * @param ticketId  (required)
     * @param tagId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTicketTagAsync(String ticketId, String tagId, String authenticationToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTicketTagValidateBeforeCall(ticketId, tagId, authenticationToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPremadeResponse
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPremadeResponseCall(String ticketPremadeResponseId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}"
            .replaceAll("\\{" + "ticket_premade_response_id" + "\\}", apiClient.escapeString(ticketPremadeResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPremadeResponseValidateBeforeCall(String ticketPremadeResponseId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketPremadeResponseId' is set
        if (ticketPremadeResponseId == null) {
            throw new ApiException("Missing the required parameter 'ticketPremadeResponseId' when calling getPremadeResponse(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getPremadeResponse(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPremadeResponseCall(ticketPremadeResponseId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @return TicketPremadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketPremadeResponse getPremadeResponse(String ticketPremadeResponseId, String authenticationToken) throws ApiException {
        ApiResponse<TicketPremadeResponse> resp = getPremadeResponseWithHttpInfo(ticketPremadeResponseId, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Retrieve ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;TicketPremadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketPremadeResponse> getPremadeResponseWithHttpInfo(String ticketPremadeResponseId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = getPremadeResponseValidateBeforeCall(ticketPremadeResponseId, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve ticket_premade_response_id
     * @param ticketPremadeResponseId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPremadeResponseAsync(String ticketPremadeResponseId, String authenticationToken, final ApiCallback<TicketPremadeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPremadeResponseValidateBeforeCall(ticketPremadeResponseId, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPremadeResponses
     * @param authenticationToken User authentication uuid (required)
     * @param draw Number of times table has been reloaded (optional)
     * @param category Filter by category (optional)
     * @param sortBy Column name to order table by (optional)
     * @param start Start query value (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param q  (optional)
     * @param length Number of rows query (optional)
     * @param statuses Filter by statuses (optional)
     * @param fields Column headers in order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPremadeResponsesCall(BigDecimal authenticationToken, Integer draw, String category, String sortBy, Integer start, String sortByOrder, String q, Integer length, String statuses, Integer fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/premade_responses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (draw != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "draw", draw));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by", sortBy));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (sortByOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by_order", sortByOrder));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (length != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "length", length));
        if (statuses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statuses", statuses));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPremadeResponsesValidateBeforeCall(BigDecimal authenticationToken, Integer draw, String category, String sortBy, Integer start, String sortByOrder, String q, Integer length, String statuses, Integer fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getPremadeResponses(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPremadeResponsesCall(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve premade_responses
     * @param authenticationToken User authentication uuid (required)
     * @param draw Number of times table has been reloaded (optional)
     * @param category Filter by category (optional)
     * @param sortBy Column name to order table by (optional)
     * @param start Start query value (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param q  (optional)
     * @param length Number of rows query (optional)
     * @param statuses Filter by statuses (optional)
     * @param fields Column headers in order (optional)
     * @return TicketPremadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketPremadeResponse getPremadeResponses(BigDecimal authenticationToken, Integer draw, String category, String sortBy, Integer start, String sortByOrder, String q, Integer length, String statuses, Integer fields) throws ApiException {
        ApiResponse<TicketPremadeResponse> resp = getPremadeResponsesWithHttpInfo(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields);
        return resp.getData();
    }

    /**
     * 
     * Retrieve premade_responses
     * @param authenticationToken User authentication uuid (required)
     * @param draw Number of times table has been reloaded (optional)
     * @param category Filter by category (optional)
     * @param sortBy Column name to order table by (optional)
     * @param start Start query value (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param q  (optional)
     * @param length Number of rows query (optional)
     * @param statuses Filter by statuses (optional)
     * @param fields Column headers in order (optional)
     * @return ApiResponse&lt;TicketPremadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketPremadeResponse> getPremadeResponsesWithHttpInfo(BigDecimal authenticationToken, Integer draw, String category, String sortBy, Integer start, String sortByOrder, String q, Integer length, String statuses, Integer fields) throws ApiException {
        com.squareup.okhttp.Call call = getPremadeResponsesValidateBeforeCall(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields, null, null);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve premade_responses
     * @param authenticationToken User authentication uuid (required)
     * @param draw Number of times table has been reloaded (optional)
     * @param category Filter by category (optional)
     * @param sortBy Column name to order table by (optional)
     * @param start Start query value (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param q  (optional)
     * @param length Number of rows query (optional)
     * @param statuses Filter by statuses (optional)
     * @param fields Column headers in order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPremadeResponsesAsync(BigDecimal authenticationToken, Integer draw, String category, String sortBy, Integer start, String sortByOrder, String q, Integer length, String statuses, Integer fields, final ApiCallback<TicketPremadeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPremadeResponsesValidateBeforeCall(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTicket
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketCall(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));
        if (statuses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statuses", statuses));
        if (orderedColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ordered_column", orderedColumn));
        if (orderedBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ordered_by", orderedBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketValidateBeforeCall(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicket(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getTicket(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve ticket_id
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicket(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy) throws ApiException {
        ApiResponse<Ticket> resp = getTicketWithHttpInfo(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy);
        return resp.getData();
    }

    /**
     * 
     * Retrieve ticket_id
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketWithHttpInfo(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy) throws ApiException {
        com.squareup.okhttp.Call call = getTicketValidateBeforeCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve ticket_id
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketAsync(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketValidateBeforeCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTicketReminder
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketReminderCall(String ticketId, String ticketReminderId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()))
            .replaceAll("\\{" + "ticket_reminder_id" + "\\}", apiClient.escapeString(ticketReminderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketReminderValidateBeforeCall(String ticketId, String ticketReminderId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicketReminder(Async)");
        }
        
        // verify the required parameter 'ticketReminderId' is set
        if (ticketReminderId == null) {
            throw new ApiException("Missing the required parameter 'ticketReminderId' when calling getTicketReminder(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getTicketReminder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketReminderCall(ticketId, ticketReminderId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicketReminder(String ticketId, String ticketReminderId, String authenticationToken) throws ApiException {
        ApiResponse<Ticket> resp = getTicketReminderWithHttpInfo(ticketId, ticketReminderId, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Retrieve ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketReminderWithHttpInfo(String ticketId, String ticketReminderId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = getTicketReminderValidateBeforeCall(ticketId, ticketReminderId, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve ticket_reminder_id
     * @param ticketId  (required)
     * @param ticketReminderId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketReminderAsync(String ticketId, String ticketReminderId, String authenticationToken, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketReminderValidateBeforeCall(ticketId, ticketReminderId, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTicketReminders
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketRemindersCall(String ticketId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/reminders"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketRemindersValidateBeforeCall(String ticketId, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicketReminders(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getTicketReminders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketRemindersCall(ticketId, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve reminders
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicketReminders(String ticketId, String authenticationToken) throws ApiException {
        ApiResponse<Ticket> resp = getTicketRemindersWithHttpInfo(ticketId, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Retrieve reminders
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketRemindersWithHttpInfo(String ticketId, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = getTicketRemindersValidateBeforeCall(ticketId, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve reminders
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketRemindersAsync(String ticketId, String authenticationToken, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketRemindersValidateBeforeCall(ticketId, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTicketTags
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param tagId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketTagsCall(String ticketId, String authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, Integer tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/tags"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (length != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "length", length));
        if (draw != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "draw", draw));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by", sortBy));
        if (sortByOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by_order", sortByOrder));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag_id", tagId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketTagsValidateBeforeCall(String ticketId, String authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, Integer tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicketTags(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getTicketTags(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketTagsCall(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve tags
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param tagId  (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicketTags(String ticketId, String authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, Integer tagId) throws ApiException {
        ApiResponse<Ticket> resp = getTicketTagsWithHttpInfo(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve tags
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param tagId  (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketTagsWithHttpInfo(String ticketId, String authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, Integer tagId) throws ApiException {
        com.squareup.okhttp.Call call = getTicketTagsValidateBeforeCall(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve tags
     * @param ticketId  (required)
     * @param authenticationToken  (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param tagId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketTagsAsync(String ticketId, String authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, Integer tagId, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketTagsValidateBeforeCall(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTickets
     * @param authenticationToken User athentication uuid (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param statuses Filter by statuses (optional)
     * @param category Filter by category (optional)
     * @param accountId  (optional)
     * @param tagId  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketsCall(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, String statuses, String category, String accountId, Integer tagId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (length != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "length", length));
        if (draw != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "draw", draw));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by", sortBy));
        if (sortByOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by_order", sortByOrder));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (statuses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statuses", statuses));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "account_id", accountId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag_id", tagId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user_id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketsValidateBeforeCall(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, String statuses, String category, String accountId, Integer tagId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling getTickets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketsCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param statuses Filter by statuses (optional)
     * @param category Filter by category (optional)
     * @param accountId  (optional)
     * @param tagId  (optional)
     * @param userId  (optional)
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> getTickets(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, String statuses, String category, String accountId, Integer tagId, String userId) throws ApiException {
        ApiResponse<List<Ticket>> resp = getTicketsWithHttpInfo(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param statuses Filter by statuses (optional)
     * @param category Filter by category (optional)
     * @param accountId  (optional)
     * @param tagId  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> getTicketsWithHttpInfo(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, String statuses, String category, String accountId, Integer tagId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getTicketsValidateBeforeCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId, null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (required)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param fields Column headers in order (optional)
     * @param statuses Filter by statuses (optional)
     * @param category Filter by category (optional)
     * @param accountId  (optional)
     * @param tagId  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketsAsync(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String fields, String statuses, String category, String accountId, Integer tagId, String userId, final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketsValidateBeforeCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTicketMessages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTicketMessagesCall(List<TicketMessage> body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ticket_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTicketMessagesValidateBeforeCall(List<TicketMessage> body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTicketMessages(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling postTicketMessages(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTicketMessagesCall(body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Insert a ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return TicketMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketMessage postTicketMessages(List<TicketMessage> body, String authenticationToken) throws ApiException {
        ApiResponse<TicketMessage> resp = postTicketMessagesWithHttpInfo(body, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Insert a ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;TicketMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketMessage> postTicketMessagesWithHttpInfo(List<TicketMessage> body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = postTicketMessagesValidateBeforeCall(body, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<TicketMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTicketMessagesAsync(List<TicketMessage> body, String authenticationToken, final ApiCallback<TicketMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTicketMessagesValidateBeforeCall(body, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTicketReminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTicketRemindersCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/reminders"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTicketRemindersValidateBeforeCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling postTicketReminders(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTicketReminders(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling postTicketReminders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTicketRemindersCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Insert a reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTicketReminders(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        postTicketRemindersWithHttpInfo(ticketId, body, authenticationToken);
    }

    /**
     * 
     * Insert a reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTicketRemindersWithHttpInfo(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = postTicketRemindersValidateBeforeCall(ticketId, body, authenticationToken, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Insert a reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTicketRemindersAsync(String ticketId, Ticket body, String authenticationToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTicketRemindersValidateBeforeCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postTickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTicketsCall(List<TicketMessage> body, BigDecimal authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTicketsValidateBeforeCall(List<TicketMessage> body, BigDecimal authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTickets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTicketsCall(body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket postTickets(List<TicketMessage> body, BigDecimal authenticationToken) throws ApiException {
        ApiResponse<Ticket> resp = postTicketsWithHttpInfo(body, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> postTicketsWithHttpInfo(List<TicketMessage> body, BigDecimal authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = postTicketsValidateBeforeCall(body, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTicketsAsync(List<TicketMessage> body, BigDecimal authenticationToken, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTicketsValidateBeforeCall(body, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPremadeResponses
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPremadeResponsesCall(TicketPremadeResponse body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets/premade_responses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPremadeResponsesValidateBeforeCall(TicketPremadeResponse body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPremadeResponses(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling putPremadeResponses(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putPremadeResponsesCall(body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update premade_responses
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return TicketPremadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketPremadeResponse putPremadeResponses(TicketPremadeResponse body, String authenticationToken) throws ApiException {
        ApiResponse<TicketPremadeResponse> resp = putPremadeResponsesWithHttpInfo(body, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Update premade_responses
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;TicketPremadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketPremadeResponse> putPremadeResponsesWithHttpInfo(TicketPremadeResponse body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = putPremadeResponsesValidateBeforeCall(body, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update premade_responses
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPremadeResponsesAsync(TicketPremadeResponse body, String authenticationToken, final ApiCallback<TicketPremadeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPremadeResponsesValidateBeforeCall(body, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketPremadeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTicketMessages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketMessagesCall(TicketMessage body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ticket_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketMessagesValidateBeforeCall(TicketMessage body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTicketMessages(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling putTicketMessages(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketMessagesCall(body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return TicketMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketMessage putTicketMessages(TicketMessage body, String authenticationToken) throws ApiException {
        ApiResponse<TicketMessage> resp = putTicketMessagesWithHttpInfo(body, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Update ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;TicketMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketMessage> putTicketMessagesWithHttpInfo(TicketMessage body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = putTicketMessagesValidateBeforeCall(body, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<TicketMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update ticket_messages
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketMessagesAsync(TicketMessage body, String authenticationToken, final ApiCallback<TicketMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketMessagesValidateBeforeCall(body, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTicketReminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketRemindersCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/reminders"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketRemindersValidateBeforeCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling putTicketReminders(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTicketReminders(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling putTicketReminders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketRemindersCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putTicketReminders(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        putTicketRemindersWithHttpInfo(ticketId, body, authenticationToken);
    }

    /**
     * 
     * Update reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putTicketRemindersWithHttpInfo(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = putTicketRemindersValidateBeforeCall(ticketId, body, authenticationToken, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update reminders
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketRemindersAsync(String ticketId, Ticket body, String authenticationToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketRemindersValidateBeforeCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putTicketReview
     * @param body The request body for the operation (required)
     * @param ticketUuid  (required)
     * @param rating  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketReviewCall(Ticket body, String ticketUuid, String rating, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ticket_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ticketUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ticket_uuid", ticketUuid));
        if (rating != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rating", rating));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketReviewValidateBeforeCall(Ticket body, String ticketUuid, String rating, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTicketReview(Async)");
        }
        
        // verify the required parameter 'ticketUuid' is set
        if (ticketUuid == null) {
            throw new ApiException("Missing the required parameter 'ticketUuid' when calling putTicketReview(Async)");
        }
        
        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling putTicketReview(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketReviewCall(body, ticketUuid, rating, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update ticket_review
     * @param body The request body for the operation (required)
     * @param ticketUuid  (required)
     * @param rating  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putTicketReview(Ticket body, String ticketUuid, String rating) throws ApiException {
        putTicketReviewWithHttpInfo(body, ticketUuid, rating);
    }

    /**
     * 
     * Update ticket_review
     * @param body The request body for the operation (required)
     * @param ticketUuid  (required)
     * @param rating  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putTicketReviewWithHttpInfo(Ticket body, String ticketUuid, String rating) throws ApiException {
        com.squareup.okhttp.Call call = putTicketReviewValidateBeforeCall(body, ticketUuid, rating, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update ticket_review
     * @param body The request body for the operation (required)
     * @param ticketUuid  (required)
     * @param rating  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketReviewAsync(Ticket body, String ticketUuid, String rating, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketReviewValidateBeforeCall(body, ticketUuid, rating, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putTicketTags
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketTagsCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/tags"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketTagsValidateBeforeCall(String ticketId, Ticket body, String authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling putTicketTags(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTicketTags(Async)");
        }
        
        // verify the required parameter 'authenticationToken' is set
        if (authenticationToken == null) {
            throw new ApiException("Missing the required parameter 'authenticationToken' when calling putTicketTags(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketTagsCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update tags
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putTicketTags(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        putTicketTagsWithHttpInfo(ticketId, body, authenticationToken);
    }

    /**
     * 
     * Update tags
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putTicketTagsWithHttpInfo(String ticketId, Ticket body, String authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = putTicketTagsValidateBeforeCall(ticketId, body, authenticationToken, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update tags
     * @param ticketId  (required)
     * @param body The request body for the operation (required)
     * @param authenticationToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketTagsAsync(String ticketId, Ticket body, String authenticationToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketTagsValidateBeforeCall(ticketId, body, authenticationToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putTickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketsCall(List<Ticket> body, Boolean authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketsValidateBeforeCall(List<Ticket> body, Boolean authenticationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTickets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketsCall(body, authenticationToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> putTickets(List<Ticket> body, Boolean authenticationToken) throws ApiException {
        ApiResponse<List<Ticket>> resp = putTicketsWithHttpInfo(body, authenticationToken);
        return resp.getData();
    }

    /**
     * 
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> putTicketsWithHttpInfo(List<Ticket> body, Boolean authenticationToken) throws ApiException {
        com.squareup.okhttp.Call call = putTicketsValidateBeforeCall(body, authenticationToken, null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketsAsync(List<Ticket> body, Boolean authenticationToken, final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketsValidateBeforeCall(body, authenticationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
